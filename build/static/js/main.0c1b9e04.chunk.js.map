{"version":3,"sources":["components/todoItems/TodoItem.js","redux/todos/actions.js","components/todoList/TodoList.js","App.js","redux/todos/reducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["TodoItem","props","dispatch","useDispatch","className","completed","type","defaultChecked","onClick","payload","id","title","connect","state","todos","map","todo","key","addTodo","text","clearCompletedTodos","useState","input","setInput","todosLeft","useSelector","filter","x","onKeyPress","event","placeholder","value","onChange","e","target","autoFocus","length","initialState","todosList","store","createStore","action","newID","listID","newTodo","newTodos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oqBAuBeA,MAnBf,SAAkBC,GAChB,IAAMC,EAAWC,cACf,OACE,wBAAIC,UAAWH,EAAMI,UAAY,YAAc,IAC7C,yBAAKD,UAAU,QACb,2BACEA,UAAU,SACVE,KAAK,WACLC,eAAgBN,EAAMI,UACtBG,QAAU,kBAAMN,ECNlB,CACFI,KARmB,cASnBG,QDIwCR,EAAMS,QAE5C,+BAAQT,EAAMU,OACd,4BAAQH,QAAS,kBAAMN,ECCvB,CACFI,KAhBmB,cAiBnBG,QDH6CR,EAAMS,MAAMN,UAAU,eEM3E,IAMeQ,eANS,SAACC,GACvB,MAAM,CACJC,MAAOD,EAAMC,SAIFF,EAxBd,SAAmBX,GAEhB,OACE,6BAASG,UAAU,QACjB,wBAAIA,UAAU,aACXH,EAAMa,MAAMC,KAAI,SAACC,GAAD,OACf,kBAAC,EAAD,CACEC,IAAKD,EAAKN,GACVC,MAAOK,EAAKL,MACZN,UAAWW,EAAKX,UAChBK,GAAIM,EAAKN,aC+BvB,IASeE,eATS,SAACC,GAAD,MAAY,CAClCC,MAAOD,EAAMC,UAGY,SAACZ,GAAD,MAAe,CACxCgB,QAAS,SAACC,GAAD,OAAUjB,EFtCa,CAC1BI,KAZgB,WAahBG,QEoC8BU,KACpCC,oBAAqB,kBAAMlB,EF5BnB,CACFI,KArB6B,8BEmDtBM,EAjDf,SAAaX,GAAQ,IAAD,EACQoB,mBAAS,IADjB,mBACXC,EADW,KACJC,EADI,KAGZC,EADYC,aAAY,SAACZ,GAAD,OAAWA,EAAMC,SACnBY,QAAO,SAACC,GAAD,OAAuB,IAAhBA,EAAEtB,aAQ5C,OACE,6BAASD,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCACA,2BACEwB,WAXR,SAAwBC,GACJ,UAAdA,EAAMZ,MACRhB,EAAMiB,QAAQI,GACdC,EAAS,MASLnB,UAAU,WACV0B,YAAY,yBACZC,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAOV,EAASU,EAAEC,OAAOH,QACnCI,WAAS,KAGb,kBAAC,EAAD,MACA,4BAAQ/B,UAAU,UAChB,0BAAMA,UAAU,cACd,gCAASoB,EAAUY,QADrB,iBAGA,4BACE5B,QAAS,kBAAMP,EAAMmB,uBACrBhB,UAAU,mBAFZ,wB,sCC9BFiC,EAAe,CACjBvB,MAAOwB,GCAIC,EAFDC,aDKS,WAAmC,IAAlC3B,EAAiC,uDAAzBwB,EAAcI,EAAW,uCACrD,OAAOA,EAAOnC,MACV,IHTgB,WGUZ,IAAMoC,EAAQC,cACRC,EAAQ,CACV,OAAU,EACV,GAAMF,EACN,MAASD,EAAOhC,QAChB,WAAa,GAEjB,kCACII,GADJ,IACWC,MAAM,GAAD,mBAAMD,EAAMC,OAAZ,CAAmB8B,MAEtC,IHrBkB,cGsBf,IAAMC,EAAWhC,EAAMC,MAAMC,KAAI,SAAAC,GAAI,OACjCA,EAAKN,KAAO+B,EAAOhC,QAAnB,2BAAkCO,GAAlC,IAAwCX,WAAYW,EAAKX,YAAcW,KAEvE,MAAO,CAACF,MAAO+B,GAGvB,IH1BmB,cG2Bf,IAAMA,EAAWhC,EAAMC,MAAMY,QACzB,SAACV,GAAD,OAAUA,EAAKN,KAAO+B,EAAOhC,WAGjC,MAAM,CACFK,MAAO+B,GAGhB,IHlC8B,wBGmC7B,IAAMA,EAAWhC,EAAMC,MAAMY,QACzB,SAACV,GAAD,OAA6B,IAAnBA,EAAKX,aAGhB,MAAM,CAACS,MAAO+B,GAErB,QAAS,OAAOhC,MEhCAiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUd,MAAOA,GACf,kBAAC,EAAD,QAGJe,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0c1b9e04.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useDispatch} from 'react-redux'\r\nimport {deleteTodo, toggleTodo} from '../../redux/index'\r\n\r\nfunction TodoItem(props) {\r\n  const dispatch = useDispatch()\r\n    return (\r\n      <li className={props.completed ? \"completed\" : \"\"}>\r\n        <div className=\"view\">\r\n          <input \r\n            className=\"toggle\" \r\n            type=\"checkbox\" \r\n            defaultChecked={props.completed}\r\n            onClick ={() => dispatch(toggleTodo(props.id))} \r\n          />\r\n          <label>{props.title}</label>\r\n          <button onClick={() => dispatch(deleteTodo(props.id))} className=\"destroy\" />\r\n        </div>\r\n      </li>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoItem","export const TOGGLE_TODO = 'TOGGLE_TODO'\r\nexport const ADD_TODO = 'ADD_TODO'\r\nexport const DELETE_TODO = 'DELETE_TODO'\r\nexport const CLEAR_COMPLETED_TODOS = 'CLEAR_COMPLETED_TODOS'\r\n\r\n\r\nexport const toggleTodo = (id) =>{\r\n    return{\r\n        type: TOGGLE_TODO,\r\n        payload: id\r\n    }\r\n}\r\nexport const addTodo = (input) =>({\r\n        type: ADD_TODO,\r\n        payload: input  \r\n})\r\nexport const deleteTodo = (id) =>{\r\n    return{\r\n        type: DELETE_TODO,\r\n        payload: id\r\n    }\r\n}\r\nexport const clearCompletedTodos = () =>{\r\n    return{\r\n        type: CLEAR_COMPLETED_TODOS\r\n    }\r\n}\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport TodoItem from '../todoItems/TodoItem'\r\n\r\n function TodoList (props) {\r\n \r\n    return (\r\n      <section className=\"main\">\r\n        <ul className=\"todo-list\">\r\n          {props.todos.map((todo) => (\r\n            <TodoItem \r\n              key={todo.id} \r\n              title={todo.title} \r\n              completed={todo.completed} \r\n              id={todo.id} \r\n            />\r\n          ))}\r\n        </ul>\r\n      </section>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return{\r\n    todos: state.todos\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TodoList)","import React, { useState } from \"react\";\r\nimport TodoList from \"./components/todoList/TodoList\";\r\nimport { addTodo, clearCompletedTodos } from \"./redux/index\";\r\nimport { connect, useSelector } from \"react-redux\";\r\n\r\nfunction App(props) {\r\n  const [input, setInput] = useState(\"\");\r\n  const todosList = useSelector((state) => state.todos);\r\n  const todosLeft = todosList.filter((x) => x.completed === false);\r\n\r\n  function handleKeyPress(event) {\r\n    if (event.key === \"Enter\") {\r\n      props.addTodo(input);\r\n      setInput(\"\");\r\n    }\r\n  }\r\n  return (\r\n    <section className=\"todoapp\">\r\n      <header className=\"header\">\r\n        <h1>todos</h1>\r\n        <input\r\n          onKeyPress={handleKeyPress}\r\n          className=\"new-todo\"\r\n          placeholder=\"What needs to be done?\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          autoFocus\r\n        />\r\n      </header>\r\n      <TodoList />\r\n      <footer className=\"footer\">\r\n        <span className=\"todo-count\">\r\n          <strong>{todosLeft.length}</strong> item(s) left\r\n        </span>\r\n        <button\r\n          onClick={() => props.clearCompletedTodos()}\r\n          className=\"clear-completed\"\r\n        >\r\n          Clear completed\r\n        </button>\r\n      </footer>\r\n    </section>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  todos: state.todos,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addTodo: (text) => dispatch(addTodo(text)),\r\n  clearCompletedTodos: () => dispatch(clearCompletedTodos()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import todosList from \"../../todos.json\";\r\nimport { v4 as listID } from 'uuid'\r\nimport {ADD_TODO, DELETE_TODO, TOGGLE_TODO, CLEAR_COMPLETED_TODOS} from './actions'\r\n\r\nconst initialState = {\r\n    todos: todosList,    \r\n}\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case ADD_TODO:{\r\n            const newID = listID()\r\n            const newTodo={\r\n                'userId': 1,\r\n                'id': newID,\r\n                'title': action.payload,\r\n                'completed': false\r\n              }\r\n            return{\r\n             ...state, todos: [...state.todos, newTodo ] \r\n            }}\r\n         case TOGGLE_TODO:{\r\n            const newTodos = state.todos.map(todo =>\r\n                todo.id === action.payload ? { ...todo, completed: !todo.completed } : todo\r\n              )          \r\n                return {todos: newTodos}\r\n            }\r\n           \r\n        case DELETE_TODO:{\r\n            const newTodos = state.todos.filter(\r\n                (todo) => todo.id !== action.payload\r\n              );\r\n          \r\n            return{\r\n                todos: newTodos\r\n            }\r\n        }\r\n       case CLEAR_COMPLETED_TODOS:{\r\n        const newTodos = state.todos.filter(\r\n            (todo) => todo.completed === false\r\n          );\r\n      \r\n           return{todos: newTodos}\r\n       }\r\n    default: return state\r\n    }\r\n}","import {createStore} from 'redux'\r\nimport {reducer} from './todos/reducer'\r\n\r\nconst store = createStore(reducer)\r\n\r\nexport default store\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Provider} from 'react-redux'\r\nimport store from './redux/store'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />    \r\n  </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}